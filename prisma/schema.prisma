generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserSex {
  MALE
  FEMALE
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  ALL
}

enum ExamType {
  UNIT_TEST
  HALF_YEARLY
  FINAL
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  firstname   String
  lastname    String
  dob         DateTime
  email       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  attendances Attendance[]
  grades      Grade[]
  status      Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([classId])
  @@index([parentId])
}

model Teacher {
  id        String    @id
  username  String    @unique
  firstname String
  lastname  String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  dob       DateTime
  status    Boolean   @default(true)
  subjects  Subject[]
  classes   Class[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Parent {
  id        String    @id
  username  String    @unique
  firstname String
  lastname  String
  email     String?   @unique
  phone     String    @unique
  address   String
  students  Student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  students      Student[]
  assignments   Assignment[]
  announcements Announcement[]

  @@index([supervisorId])
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  teachers    Teacher[]
  assignments Assignment[]
  grades      Grade[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  classId   Int
  class     Class    @relation(fields: [classId], references: [id])
  subjectId Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])

  @@index([studentId])
  @@index([date])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
  targetRole  Role?
}

model Grade {
  id        Int      @id @default(autoincrement())
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  subjectId Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
  examType  ExamType
  score     Float
  maxScore  Float
  examDate  DateTime
  createdAt DateTime @default(now())

  @@index([studentId])
  @@index([subjectId])
  @@index([examType])
}

model AcademicYear {
  id        Int      @id @default(autoincrement())
  yearLabel String   @unique
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
}
