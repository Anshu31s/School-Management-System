generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  attendances Attendance[]
  birthday    DateTime
  status      Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  classes   Class[]
  birthday  DateTime
  status    Boolean   @default(true)
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
  status    Boolean   @default(true)
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  students      Student[]
  assignments   Assignment[]
  announcements Announcement[]
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  teachers    Teacher[]
  assignments Assignment[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  classId   Int
  class     Class    @relation(fields: [classId], references: [id])
  subjectId Int
  subject   Subject  @relation(fields: [subjectId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  classId     Int? // if assigned to a class
  class       Class?   @relation(fields: [classId], references: [id])
  targetRole  String? // "teacher", "student", "parent"
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
